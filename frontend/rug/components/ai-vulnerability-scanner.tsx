'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Search, 
  Database,
  Zap,
  FileText,
  TrendingUp,
  Eye
} from 'lucide-react';
import apiService from '@/lib/api';

interface VulnerabilityReport {
  success: boolean;
  score: number;
  vulnerabilities: Array<{
    type: string;
    severity: string;
    description: string;
    locations?: number;
    impact?: string;
    recommendation?: string;
  }>;
  aiAnalysis?: {
    vulnerabilities: any[];
    overallRisk: string;
    summary: string;
  };
  auditDatasetMatches: Array<{
    auditId: string;
    contractType: string;
    vulnerabilities: string[];
    severity: string;
    description: string;
    recommendedFix: string;
  }>;
  recommendations: string[];
  scanTimestamp: string;
}

export default function AIVulnerabilityScanner() {
  const [contractCode, setContractCode] = useState('');
  const [contractAddress, setContractAddress] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [report, setReport] = useState<VulnerabilityReport | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleScan = async () => {
    if (!contractCode.trim()) {
      setError('Please provide contract code to scan');
      return;
    }

    setIsScanning(true);
    setError(null);

    try {
      const response = await apiService.scanVulnerabilities({
        contractCode: contractCode.trim(),
        contractAddress: contractAddress.trim() || undefined
      });

      if (response.success) {
        setReport(response.vulnerabilityReport);
      } else {
        setError('Vulnerability scan failed');
      }
    } catch (err: any) {
      setError(err.message || 'Scan failed');
    } finally {
      setIsScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreDescription = (score: number) => {
    if (score >= 90) return 'Excellent Security';
    if (score >= 70) return 'Good Security';
    if (score >= 50) return 'Moderate Security';
    return 'Poor Security';
  };

  const exampleContract = `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Example {
    mapping(address => uint256) public balances;
    address public owner;
    
    constructor() {
        owner = msg.sender;
    }
    
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // Vulnerable to reentrancy attack
        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] -= amount;
    }
}`;

  return (
    <div className="space-y-6">
      {/* Scanner Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5 text-blue-500" />
            AI Vulnerability Scanner
            <Badge variant="secondary" className="ml-auto">
              Real-time Analysis üîç
            </Badge>
          </CardTitle>
          <p className="text-sm text-gray-600">
            Advanced vulnerability detection using AI and 1,000+ audit dataset cross-referencing
          </p>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Contract Address (Optional) */}
          <div className="space-y-2">
            <Label htmlFor="contract-address">Contract Address (Optional)</Label>
            <Input
              id="contract-address"
              placeholder="0x..."
              value={contractAddress}
              onChange={(e) => setContractAddress(e.target.value)}
            />
          </div>

          {/* Contract Code */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="contract-code">Smart Contract Code *</Label>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setContractCode(exampleContract)}
              >
                Load Example
              </Button>
            </div>
            <Textarea
              id="contract-code"
              placeholder="Paste your Solidity contract code here..."
              value={contractCode}
              onChange={(e) => setContractCode(e.target.value)}
              rows={12}
              className="font-mono text-sm"
            />
          </div>

          {/* Scan Button */}
          <Button 
            onClick={handleScan} 
            disabled={isScanning}
            className="w-full"
            size="lg"
          >
            {isScanning ? (
              <>
                <Search className="mr-2 h-4 w-4 animate-spin" />
                Scanning for Vulnerabilities...
              </>
            ) : (
              <>
                <Shield className="mr-2 h-4 w-4" />
                Scan Contract
              </>
            )}
          </Button>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Scan Report */}
      {report && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-500" />
                Vulnerability Report
              </span>
              <Badge variant="outline">
                {new Date(report.scanTimestamp).toLocaleString()}
              </Badge>
            </CardTitle>
          </CardHeader>

          <CardContent>
            <Tabs defaultValue="overview" className="space-y-4">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
                <TabsTrigger value="ai-analysis">AI Analysis</TabsTrigger>
                <TabsTrigger value="audit-matches">Audit Matches</TabsTrigger>
              </TabsList>

              {/* Overview Tab */}
              <TabsContent value="overview" className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Security Score */}
                  <div className="bg-gray-50 p-6 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">Security Score</h3>
                      <TrendingUp className="h-5 w-5 text-gray-500" />
                    </div>
                    <div className={`text-3xl font-bold ${getScoreColor(report.score)}`}>
                      {report.score}/100
                    </div>
                    <p className="text-sm text-gray-600 mt-1">
                      {getScoreDescription(report.score)}
                    </p>
                    <Progress value={report.score} className="mt-3" />
                  </div>

                  {/* Issue Summary */}
                  <div className="bg-gray-50 p-6 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">Issues Found</h3>
                      <AlertTriangle className="h-5 w-5 text-gray-500" />
                    </div>
                    <div className="text-3xl font-bold text-orange-600">
                      {report.vulnerabilities.length}
                    </div>
                    <p className="text-sm text-gray-600 mt-1">
                      Potential vulnerabilities detected
                    </p>
                  </div>
                </div>

                {/* Recommendations */}
                {report.recommendations.length > 0 && (
                  <div className="space-y-2">
                    <h3 className="font-medium flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      Security Recommendations
                    </h3>
                    <div className="space-y-2">
                      {report.recommendations.map((rec, index) => (
                        <div key={index} className="flex items-start gap-2 p-3 bg-green-50 border border-green-200 rounded-lg">
                          <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                          <span className="text-sm text-green-800">{rec}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </TabsContent>

              {/* Vulnerabilities Tab */}
              <TabsContent value="vulnerabilities" className="space-y-4">
                {report.vulnerabilities.length > 0 ? (
                  <div className="space-y-3">
                    {report.vulnerabilities.map((vuln, index) => (
                      <div key={index} className={`p-4 rounded-lg border ${getSeverityColor(vuln.severity)}`}>
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="font-medium">{vuln.type}</h3>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity}
                          </Badge>
                        </div>
                        <p className="text-sm mb-2">{vuln.description}</p>
                        {vuln.impact && (
                          <p className="text-sm">
                            <strong>Impact:</strong> {vuln.impact}
                          </p>
                        )}
                        {vuln.locations && (
                          <p className="text-sm">
                            <strong>Occurrences:</strong> {vuln.locations}
                          </p>
                        )}
                        {vuln.recommendation && (
                          <div className="mt-2 p-2 bg-white/50 rounded">
                            <p className="text-sm">
                              <strong>üí° Fix:</strong> {vuln.recommendation}
                            </p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-3" />
                    <p className="text-lg font-medium text-green-600">No Vulnerabilities Found</p>
                    <p className="text-sm text-gray-600">Your contract passed all vulnerability checks!</p>
                  </div>
                )}
              </TabsContent>

              {/* AI Analysis Tab */}
              <TabsContent value="ai-analysis" className="space-y-4">
                {report.aiAnalysis ? (
                  <div className="space-y-4">
                    <div className={`p-4 rounded-lg border ${getSeverityColor(report.aiAnalysis.overallRisk)}`}>
                      <h3 className="font-medium mb-2">Overall Risk Assessment</h3>
                      <Badge className={getSeverityColor(report.aiAnalysis.overallRisk)}>
                        {report.aiAnalysis.overallRisk}
                      </Badge>
                    </div>
                    
                    <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                      <h3 className="font-medium mb-2 flex items-center gap-2">
                        <Eye className="h-4 w-4" />
                        AI Summary
                      </h3>
                      <p className="text-sm text-blue-800">{report.aiAnalysis.summary}</p>
                    </div>

                    {report.aiAnalysis.vulnerabilities.length > 0 && (
                      <div className="space-y-3">
                        <h3 className="font-medium">AI-Detected Issues</h3>
                        {report.aiAnalysis.vulnerabilities.map((vuln, index) => (
                          <div key={index} className={`p-3 rounded-lg border ${getSeverityColor(vuln.severity)}`}>
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-medium">{vuln.type}</span>
                              <Badge className={getSeverityColor(vuln.severity)}>
                                {vuln.severity}
                              </Badge>
                            </div>
                            <p className="text-sm mb-2">{vuln.description}</p>
                            {vuln.recommendation && (
                              <p className="text-sm">
                                <strong>üí° Recommendation:</strong> {vuln.recommendation}
                              </p>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Database className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                    <p className="text-lg font-medium text-gray-600">AI Analysis Unavailable</p>
                    <p className="text-sm text-gray-500">Pattern-based analysis was used instead</p>
                  </div>
                )}
              </TabsContent>

              {/* Audit Matches Tab */}
              <TabsContent value="audit-matches" className="space-y-4">
                {report.auditDatasetMatches.length > 0 ? (
                  <div className="space-y-3">
                    <p className="text-sm text-gray-600">
                      Found {report.auditDatasetMatches.length} matches in our audit dataset of 1,000+ security reviews
                    </p>
                    {report.auditDatasetMatches.map((match, index) => (
                      <div key={index} className={`p-4 rounded-lg border ${getSeverityColor(match.severity)}`}>
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <Badge variant="outline">{match.auditId}</Badge>
                            <Badge variant="secondary">{match.contractType}</Badge>
                          </div>
                          <Badge className={getSeverityColor(match.severity)}>
                            {match.severity}
                          </Badge>
                        </div>
                        <p className="text-sm mb-2">{match.description}</p>
                        <div className="text-sm mb-2">
                          <strong>Vulnerabilities:</strong> {match.vulnerabilities.join(', ')}
                        </div>
                        <div className="p-2 bg-white/50 rounded">
                          <p className="text-sm">
                            <strong>üîß Recommended Fix:</strong> {match.recommendedFix}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Database className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                    <p className="text-lg font-medium text-gray-600">No Audit Dataset Matches</p>
                    <p className="text-sm text-gray-500">No similar patterns found in our security audit database</p>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
